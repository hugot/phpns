#!/bin/bash
##
# phpns - Resolve namespaces and fix missing use statements in your PHP scripts.

# shellcheck disable=SC2155
declare SCRIPT_DIR="$(cd "$(dirname "$(readlink "${BASH_SOURCE[0]}" || echo "${BASH_SOURCE[0]}")")" && pwd)"
declare CACHE_DIR=./.cache/phpns
declare INFO=1

# Cache locations
declare CLASSES="$CACHE_DIR/classes"
declare NAMESPACES="$CACHE_DIR/namespaces"
declare USES="$CACHE_DIR/uses"
declare USES_LOOKUP="$CACHE_DIR/uses_lookup"
declare USES_LOOKUP_OWN="$CACHE_DIR/uses_lookup_own"
declare FILE_PATHS="$CACHE_DIR/file_paths"
declare NAMESPACE_FILE_PATHS="$CACHE_DIR/namespace_file_paths"
declare INDEXED="$CACHE_DIR/indexed"

[[ $DEBUG -eq 2 ]] && set -x
shopt -s extglob
shopt -so pipefail

#shellcheck disable=SC1090
include() {
    source "$SCRIPT_DIR"/../lib/"${1}".bash
}

include handle_arguments
include messaging
include find_uses_and_needs
include index

read -rd '' USAGE <<'EOF'
    phpns - Resolve namespaces and fix missing use statements in your PHP scripts.
    
    USAGE:
        phpns COMMAND [ ARGUMENTS ] [ OPTIONS ]
    
    COMMANDS:
        ns, namespace FILE : resolve the namespace of a file.
        i, index : Index all php files in a project directory for usage.
        fu, find-use CLASS_NAME : Find the use statement needed to import the provided class.
        fxu, fix-uses FILE : Find all used classes that have no use statement in the provided file and add use statements for them.
        cns, classes-in-namespace NAMESPACE: List all classes for a certain namespace
        cmp, complete WORD: Complete FQN's for namespaces and classes that match WORD.
        fp, filepath FQN: print the filepath of a class by the name of FQN.

    TO BE IMPLEMENTED:
        rmuu, remove-unneeded-uses FILE: Remove all use statements for classes that are not being used.

    OPTIONS FOR ALL COMMANDS:
        -s --silent: Don't print info.
    
    UNIQUE OPTIONS PER COMMAND:
        namespace: -
        index:
            -d, --diff: Show differences between the files in the index and the files in the project directory.
            -N, --new: Only index new files
        find-use:
            -j, --json: Provide possible use FQN's as a json array.
            -p, --prefer-own: If there are matches inside the "src" dir, only use those.
            -a, --auto-pick: Use first encountered match, don't provide a choice.
            -b. --bare: Print FQN's without any additives.
        fix-uses:
            -j, --json: Provide possible use FQN's per class as a json object with the class names as keys.
            -p, --prefer-own: If there are matches inside the "src" dir, only use those.
            -a, --auto-pick: Use first encountered match, for every class, don't provide a choice.
            -o, --stdout: Print to stdout in stead of printing to the selected file.
        complete:
            -e, --expand-classes: If WORD is a class name and no namespaces match, provide the FQN for the class that matches WORD.
            -n, --no-classes: Only complete FQN's for namespaces.
            -c, --complete-classes: If no namespaces match and WORD is not a class name, provide FQN's for all partially matching classes.
        filepath: -

EOF

execute() {
    declare command="$1" INFO="$INFO"
    declare -a CONFIG=()
    shift

    if [[ $command == @(-h|--help|help) ]]; then
        echo "$USAGE" >&2
        exit 0
    fi

    if ! [[ -f ./composer.json ]] && ! [[ -d ./.git ]]; then
        echo "No composer.json or .git file found, not in root of poject, exiting." >&2
        exit 1
    fi

    case "$command" in
        ns | namespace)
            checkCache
            declare file="$1"

            # Try the index, if that doesn't work, attempt to extract the namespace from the file itself.
            if ! grep "(?<=$file:).*" "$NAMESPACE_FILE_PATHS"; then
                 grep -Po '(?<=^namespace[[:blank:]])[A-Za-z_\\]+' "$file"
            fi
            ;;
        i | index)
            handleArguments index "$@" || return $?
            [[ -d $TREE_DIR ]] || mkdir -p "$TREE_DIR"

            # The arguments to grep need to be dynamic here, because the diff option
            # requires different arguments to be passed to grep.
            declare -a grep_args=(
                -H
                '^\(class\|abstract class\|final class\|namespace\|interface\|trait\) [A-Za-z]\+'
                --exclude-dir={.cache,var}
                --binary-files=without-match
            )

            # Only index new files
            if [[ ${CONFIG[$INDEX_NEW]} == '--new' ]]; then
                declare -a new_files=() deleted_files=()
                
                # Extract new files from diff.
                while IFS=':' read -ra diff_file; do
                    if [[ ${diff_file[0]} == '-' ]]; then
                        deleted_files=("${diff_file[1]}" "${deleted_files[@]}")
                    elif [[ ${diff_file[0]} == '+' ]]; then
                        new_files=("${diff_file[1]}" "${new_files[@]}")
                    fi
                done < <(diffIndex)

                # Inform the user if non-existent files were found. Right now the only
                # way to fix this is to reindex entirely.
                if [[ ${#deleted_files[@]} -gt 0 ]]; then
                    info "There are ${#deleted_files[@]} non-existent files in your index. Consider reindexing to prevent incorrect results."
                    info 'Some of these none existent files are:'
                    for i in {0..19}; do
                        [[ $i -ge ${#deleted_files[@]} ]] && break
                        infof '    - "%s"\n' "${deleted_files[$i]}"
                    done
                fi

                if [[ ${#new_files[@]} -eq 0 ]]; then
                    info 'No new files were found.'
                    return 0
                else
                    info "${#new_files[@]} new files found to index."
                fi

                # To exclusively index new files, add the filenames to the arguments array
                grep_args=("${grep_args[@]}" "${new_files[@]}")
            elif [[ ${CONFIG[$INDEX_DIFF]} == '--diff' ]]; then
                diffIndex
                return $?
            else
                grep_args=("${grep_args[@]}" '-r' '--include=*.php')
            fi

            # Index matching files
            grep -m 2 "${grep_args[@]}" | grep -v '^vendor/bin' | fillIndex

            # Add non-matching files to the file with indexed files.
            # This is necessary to be able to diff the index.
            grep -L "${grep_args[@]}" | grep -v '^vendor/bin' >> "$INDEXED"
            ;;
        fu | find-use)
            checkCache
            handleArguments find-use "$@" || return $?
            declare use_path='' class_name="${CONFIG[$CLASS_NAME]}"
            if [[ "$class_name" == @(array|string|float|int|void|mixed) ]]; then
                infof 'Type "%s" is not a class, but a primitive type.\n' "$class_name"
                return 1
            fi

            findUsePathForClass "$class_name"
            ;;
        fxu | fix-uses)
            checkCache
            handleArguments fix-uses "$@" || return $?

            declare file="${CONFIG[$FILE]}"

            if ! [[ -f $file ]]; then
                infof 'File "%s" does not exist or is not a regular file.\n' "$file"

                return 1
            elif [[ ${CONFIG[$STDOUT]} == '--stdout' ]]; then
                fixMissingUseStatements "$file"
            else
                # shellcheck disable=SC2005
                echo "$(fixMissingUseStatements "$file")" > "$file"
            fi
            ;;
        cns | classes-in-namespace)
            handleArguments classes-in-namespace "$@" || return $?
            checkCache

            declare namespace="${CONFIG[$NAMESPACE]}\\"
            debug "Checking for namespace $namespace"

            grep -Po "(?<=${namespace//\\/\\\\}).+" "$USES"
            ;;
        cmp | complete)
            handleArguments complete "$@" || return $?
            checkCache
            declare match='false' word="${CONFIG[$WORD]}" search_file="$USES"

            if [[ ${CONFIG[$NO_CLASSES]} == '--no-classes' ]]; then
                search_file="$NAMESPACES"
            fi

            if grep -oP "^${word//\\/\\\\}"'(\\[A-Za-z_]+|[A-Za-z_]+)?' "$search_file" | sort ; then
                match='true'
            fi

            if ! $match && [[ ${CONFIG[$EXPAND_CLASSES]} == '--expand-classes' ]] && [[ $word == +([A-Za-z]) ]]; then
                declare -a possibilities=()
                possibilities=($(execute fu --prefer-own --silent --bare "$word"))

                if [[ ${#possibilities[@]} -eq 0 ]] && [[ ${CONFIG[$COMPLETE_CLASSES]} == '--complete-classes' ]]; then
                    declare -a classes=()
                    classes=($(grep "^${word}" "$CLASSES"))
                    for class in "${classes[@]}"; do
                        execute fu --prefer-own --silent --bare "$class"
                    done

                    [[ ${#classes[@]} -gt 1 ]] && echo "$word"
                    return 0
                fi

                printf '%s\n' "${possibilities[@]}"
                [[ ${#possibilities[@]} -gt 1 ]] && echo "$word"
            fi
            ;;
        fp | filepath)
            handleArguments filepath "$@" || return $?
            checkCache

            grep -Po "^.*(?=:${CONFIG[$CLASS_PATH]//\\/\\\\}$)" "$FILE_PATHS"
            ;;
        *)
            printf 'Command "%s" is not a valid phpns command.\n' "$command" >&2
            exit 1
            ;;
    esac
}

# shellcheck disable=SC2034
fixMissingUseStatements() {
    declare check_uses='false' check_needs='false' file="$1"
    declare -A uses=() needs=() namespace=()
    declare -a classes=()
    
    classes=($(execute cns "$(execute ns "$file")"))
    for class in "${classes[@]}"; do
        namespace["$class"]='in_namespace'
    done

    findUsesAndNeeds < "$file"
    addUseStatements "${!needs[@]}" < "$file"
}

findUsePathForClass() {
    declare class="$1"
    if [[ ${CONFIG[$PREFER_OWN]} == '--prefer-own' ]]; then
        declare -a possibilities=($(grep -Po "(?<=^${CONFIG[$CLASS_NAME]}:).*" "$USES_LOOKUP_OWN"))
    else
        declare -a possibilities=($(grep -Po "(?<=^${CONFIG[$CLASS_NAME]}:).*" "$USES_LOOKUP"))
    fi

    if [[ ${#possibilities[@]} -eq 1 ]]; then
        use_path="${possibilities[0]}"
        debugf 'Single use path "%s" found' "${possibilities[0]}"

        # Provide an escaped string for json output if requested.
        [[ ${CONFIG[$JSON]} == '--json' ]] && printf -v use_path '"%s"' "${use_path//\\/\\\\}"
    elif [[ ${#possibilities[@]} -eq 0 ]]; then
        _handle_no_use
        return $?
    else
        _handle_multiple_uses
    fi

    infof 'Found use statement for "%s"\n' "$use_path" >&2
    if [[ ${CONFIG[$JSON]} == '--json' ]]; then
        echo '['
        echo "$use_path"
        printf ']'
    elif [[ ${CONFIG[$BARE]} ]]; then
        echo "$use_path"
    else
        echo "use $use_path;"
    fi
}

_handle_no_use() {
    if [[ ${CONFIG[$PREFER_OWN]} == '--prefer-own' ]]; then
        CONFIG[$PREFER_OWN]=
        execute fu "${CONFIG[@]}"
        return $?
    else
        infof 'No match found for class "%s"\n' "$class_name" >&2
        [[ ${CONFIG[$JSON]} == '--json' ]] && printf '[]'
    fi
    return 1
}

_handle_multiple_uses() {
    if [[ ${CONFIG[$AUTO_PICK]} == '--auto-pick' ]]; then
        use_path="${possibilities[0]}"

        return 0
    elif [[ ${CONFIG[$BARE]} == '--bare' ]]; then
        use_path="$(printf '%s\n' "${possibilities[@]}")"

        return 0
    elif [[ ${CONFIG[$JSON]} == '--json' ]]; then
        use_path="$(
        for i in "${!possibilities[@]}"; do
            printf '"%s"' "${possibilities[$i]//\\/\\\\}"
            [[ $i -lt $((${#possibilities[@]}-1)) ]] && printf ','
            echo
        done 
        )"
        
        return 0
    fi

    infof 'Multiple matches for class "%s", please pick one.\n' "$class_name" >&2
    select match in "${possibilities[@]}"; do
        use_path="$match"
        break
    done < /dev/tty
}

addUseStatements() {
    declare -a needs=("$@")
    declare use_statements=''
    if [[ ${CONFIG[$JSON]} == '--json' ]]; then
        declare -i length="$((${#needs[@]}-1))" current=0
        echo '{'
        for needed in "${needs[@]}"; do
            printf '"%s": ' "$needed"
            execute fu --json "$needed" "${CONFIG[$PREFER_OWN]}" "${CONFIG[$AUTO_PICK]}"
            [[ $((current++)) -lt $length ]] && printf ','
            echo
        done
        echo '}'

        return 0
    fi

    while IFS='' read -r line; do
        echo "$line"

        if [[ $line == namespace* ]]; then
            IFS='' read -r line && echo "$line"

            use_statements="$(
            for needed in "${needs[@]}"; do
                execute fu "$needed" "${CONFIG[$PREFER_OWN]}" "${CONFIG[$AUTO_PICK]}"
            done | sort
            )"

            [[ -n $use_statements ]] && echo "$use_statements"
        fi
    done

    declare -i added_uses=0
    added_uses="$(echo -n "$use_statements" | wc -l)"
    [[ -n $use_statements ]] && ((added_uses++))
    info "$added_uses use statements added out of ${#needs[@]} needed types. Types that were needed:" >&2
    infof '           - "%s"\n' "${needs[@]}" >&2
}

execute "$@"
